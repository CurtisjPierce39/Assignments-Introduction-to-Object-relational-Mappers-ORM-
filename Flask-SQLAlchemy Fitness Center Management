from flask import Flask, jsonify, request #Question 1 Task 1
from flask_sqlalchemy import SQLAlchemy
from flask_marshmallow import Marshmallow
from marshmallow import fields, ValidationError

app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'mysql+mysqlconnector://root:Cjp007Cjp!@localhost/gym_database_management'
db = SQLAlchemy(app)
ma = Marshmallow(app)

class MemberSchema(ma.Schema):
    member_id = fields.Int(required=True)
    name = fields.String(required=True)
    age = fields.Int(required=True)

    class Meta:
        fields = ("member_id", "name", "age")

member_schema = MemberSchema()
members_schema = MemberSchema(many=True)

class SessionSchema(ma.Schema):
    session_id = fields.Int(required=True)
    member_id = fields.Int(required=True)
    session_date = fields.Date(required=True)
    duration_minutes = fields.Int(required=True)
    calories_burned = fields.Int(required=True)

    class Meta:
        fields = ("session_id", "member_id", "session_date", "duration_minutes", "calories_burned")
        
session_schema = SessionSchema()
sessions_schema = SessionSchema(many=True)

class Members(db.Model):
    __tablename__ = 'Members'
    member_id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(255), nullable=False)
    age = db.Column(db.Integer)
    booked_sessions = db.relationship('WorkoutSessions', backref='Members')

class WorkoutSessions(db.Model):
    __tablename__ = 'WorkoutSessions'
    session_id = db.Column(db.Integer, primary_key=True)
    member_id = db.Column(db.Integer, db.ForeignKey('Members.member_id'))
    session_date = db.Column(db.Date, nullable=False)
    duration_minutes = db.Column(db.String(30), nullable=False)
    calories_burned = db.Column(db.String(30), nullable=False)
    member = db.relationship('Members', backref='Member_account', uselist=False)

@app.route('/')#Question 1 Task 2
def home():
    return "Welcome"

@app.route('/members', methods=['GET'])
def get_members():
    members = Members.query.all()
    return members_schema.jsonify(members)

@app.route('/members', methods=['POST'])
def add_member():
    try:
        #Validate and deserialize
        member_data = member_schema.load(request.json)
    except ValidationError as err:
        return jsonify(err.messages), 400

    new_member = Members(member_id=member_data['member_id'], name=member_data['name'], age=member_data['age'])
    db.session.add(new_member)
    db.session.commit()
    return jsonify({"message": "New Member Added Successfully!"}), 201

@app.route('/members/<int:member_id>', methods=['PUT'])
def update_member(member_id):
    member = Members.query.get_or_404(member_id)
    try:
        member_data = member_schema.load(request.json)
    except ValidationError as err:
        return jsonify(err.messages), 400

    member.member_id = member_data['member_id']
    member.name = member_data['name']
    member.age = member_data['age']
    db.session.commit()
    return jsonify({"message": "Member details updated successfully!"})

@app.route('/members/<int:member_id>', methods=['DELETE'])
def delete_member(member_id):
    member = Members.query.get_or_404(member_id)
    db.session.delete(member)
    db.session.commit()
    return jsonify({"message": "Member removed successfully"})

#Question 1 Task 3

@app.route('/workoutsessions', methods=['GET'])
def get_sessions():
    sessions = WorkoutSessions.query.all()
    return sessions_schema.jsonify(sessions)

@app.route('/workoutsessions', methods=['POST'])
def add_session():
    try:
        #Validate and deserialize
        session_data = session_schema.load(request.json)
    except ValidationError as err:
        return jsonify(err.messages), 400

    new_session = WorkoutSessions(session_id=session_data['session_id'], member_id=session_data['member_id'], session_date=session_data['session_date'], duration_minutes=session_data['duration_minutes'], calories_burned=session_data['calories_burned'])
    db.session.add(new_session)
    db.session.commit()
    return jsonify({"message": "New Session Added Successfully!"}), 201

@app.route('/workoutsessions/<int:session_id>', methods=['PUT'])
def update_session(session_id):
    session = WorkoutSessions.query.get_or_404(session_id)
    try:
        session_data = session_schema.load(request.json)
    except ValidationError as err:
        return jsonify(err.messages), 400

    session.session_id = session_data['session_id']
    session.member_id = session_data['member_id']
    session.session_date = session_data['session_date']
    session.duration_minutes = session_data['duration_minutes']
    session.calories_burned = session_data['calories_burned']
    db.session.commit()
    return jsonify({"message": "Session details updated successfully!"})

@app.route('/workoutsessions/<int:session_id>', methods=['DELETE'])
def delete_customer(session_id):
    session = WorkoutSessions.query.get_or_404(session_id)
    db.session.delete(session)
    db.session.commit()
    return jsonify({"message": "Session removed successfully"})

with app.app_context():
    db.create_all()

if __name__ == '__main__':
    app.run(debug=True)
